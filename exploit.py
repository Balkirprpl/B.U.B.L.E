import subprocess
import os
import json
import requests
import time
import logging
from pwn import *
import buble

access_token = 'ctfd_d8983bef2d9ab57507beddda65d569e7a519fea5df209cbc2ee0dfcb26c07696'
headers = {
    "Authorization": f"Token {access_token}",
    "Content-Type" : "application/json",
}
logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

def run_exploit_on_this_(binary, chal_id):
    print(binary, chal_id)
    # assuming the exploit will return the payload to the exploit
    flag = buble.exploit(binary)
    send_flag(flag, chal_id)
    # testing both functions to be later used from this function:
    #send_flag("not the flag", chal_id)
    #send_payload(binary, b'test', chal_id)

def send_flag(flag, chal_id):
    challenge_url = "https://ace.ctfd.io/api/v1/challenges/attempt"
    data = json.dumps({"challenge_id" : chal_id, "submission" : flag})
    response = requests.post(challenge_url, headers=headers, data=data)
    log.info("response: " + str(response.status_code))
    c = 0
    while response.status_code != 200:
        log.info("waiting")
        time.sleep(5+c)
        c += 2
        response = requests.post(challenge_url, headers=headers, data=data)

    log.info(f'Flag sent: {response} after {c/2} attempts.')


# not working for:
#  - bin-write_gadgets-0
#  - bin-printf_write_var-0
#  - bin-printf_read_var-0
#  - bin-rop_parameters-0
#  - bin-got_overwrite-0
# due to name missmatch in the website to the repository
# will be fixed by hosts during the competition.

if __name__ == "__main__":
    # downloads binaries
    while 1 == 1:
        try:
            subprocess.run("git clone https://github.com/tj-oconnor/ace-binaries.git", shell = True)
            os.chdir('./ace-binaries/final-binaries/')
            break
        except:
            print("Exception while loading binaries.")

    chal_to_id = {}
    # getting challenge IDS
    try:
        chal_url = "https://ace.ctfd.io/api/v1/challenges"
        response = requests.get(chal_url, headers=headers)
        json_data = json.loads(response.text).get("data",{})
        for i in json_data:
            chal_to_id[i['name']] = i['id']

    except:
        print(f"Error Trying to get challenges from website")
    # running the exploit method on each of the binaries in the repo
    # it receives the name of the binary file and the challenge ID from CTFd.io
    for v in os.listdir():
        try:
            run_exploit_on_this_(v, chal_to_id[v])
            time.sleep(1)
        except Exception as e:
            print(f"Exception while exploiting{v}\n{e}")
            time.sleep(1)

    print("done.")
